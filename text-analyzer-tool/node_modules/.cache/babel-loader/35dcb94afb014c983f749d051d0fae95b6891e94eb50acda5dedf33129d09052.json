{"ast":null,"code":"var _jsxFileName = \"/Users/luisaranda/Documents/Projects/React 1/React1/text-analyzer-tool/src/components/ResultBox/index.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport './index.scss';\nimport { pronouns } from '../../data/pronouns';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ResultBox = _ref => {\n  _s();\n  let {\n    text\n  } = _ref;\n  const [resultBar, setResultBar] = useState({\n    Words: 0,\n    Characters: 0,\n    Sentences: 0,\n    Paragraphs: 0,\n    Pronouns: 0\n  });\n  useEffect(() => {\n    const cleanText = text.trim();\n    const chars = cleanText.length;\n    const words = cleanText.split(' ').filter(w => w !== '');\n    const copyResultBar = {\n      ...resultBar\n    };\n    copyResultBar.Words = words.length;\n    copyResultBar.Characters = chars;\n    copyResultBar.Sentences = (cleanText.match(/[\\w|\\)][.?!](\\s|$)/g) || []).length;\n    copyResultBar.Paragraphs = (cleanText.match(/[\\r\\n]+(?!\\s*$)/) || []).length;\n    copyResultBar.Pronouns = words.filter(w => pronouns.includes(w.toLowerCase())).length;\n    setResultBar(copyResultBar);\n  }, [resultBar, text]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"result-bar\",\n    children: Object.keys(resultBar).map(title => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"box-title\",\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"box-value\",\n        children: resultBar[title]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this)]\n    }, title, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(ResultBox, \"24OEC8Dr3EOs7hvLT2ZrYzitxN0=\");\n_c = ResultBox;\nexport default ResultBox;\nvar _c;\n$RefreshReg$(_c, \"ResultBox\");","map":{"version":3,"names":["useState","useEffect","pronouns","ResultBox","text","resultBar","setResultBar","Words","Characters","Sentences","Paragraphs","Pronouns","cleanText","trim","chars","length","words","split","filter","w","copyResultBar","match","includes","toLowerCase","Object","keys","map","title"],"sources":["/Users/luisaranda/Documents/Projects/React 1/React1/text-analyzer-tool/src/components/ResultBox/index.tsx"],"sourcesContent":["import { useState, useEffect } from 'react'\nimport './index.scss'\nimport { pronouns } from '../../data/pronouns'\n\ninterface IResultBox {\n  text: string\n}\n\nconst ResultBox = ({ text }: IResultBox) => {\n  const [resultBar, setResultBar] = useState<Record<string, number>>({\n    Words: 0,\n    Characters: 0,\n    Sentences: 0,\n    Paragraphs: 0,\n    Pronouns: 0,\n  })\n\n  useEffect(() => {\n    const cleanText = text.trim()\n    const chars = cleanText.length\n    const words = cleanText.split(' ').filter((w) => w !== '')\n    const copyResultBar = { ...resultBar }\n    copyResultBar.Words = words.length\n    copyResultBar.Characters = chars\n\n    copyResultBar.Sentences = (cleanText.match(/[\\w|\\)][.?!](\\s|$)/g) || []).length\n    copyResultBar.Paragraphs = (cleanText.match(/[\\r\\n]+(?!\\s*$)/) || []).length\n    copyResultBar.Pronouns = words.filter((w) => pronouns.includes(w.toLowerCase())).length\n    setResultBar(copyResultBar)\n  }, [resultBar, text])\n\n  return (\n    <div className=\"result-bar\">\n      {Object.keys(resultBar).map((title: string) => (\n        <div className=\"result-box\" key={title}>\n          <span className=\"box-title\">{title}</span>\n          <span className=\"box-value\">{resultBar[title]}</span>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default ResultBox\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAO,cAAc;AACrB,SAASC,QAAQ,QAAQ,qBAAqB;AAAA;AAM9C,MAAMC,SAAS,GAAG,QAA0B;EAAA;EAAA,IAAzB;IAAEC;EAAiB,CAAC;EACrC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAyB;IACjEO,KAAK,EAAE,CAAC;IACRC,UAAU,EAAE,CAAC;IACbC,SAAS,EAAE,CAAC;IACZC,UAAU,EAAE,CAAC;IACbC,QAAQ,EAAE;EACZ,CAAC,CAAC;EAEFV,SAAS,CAAC,MAAM;IACd,MAAMW,SAAS,GAAGR,IAAI,CAACS,IAAI,EAAE;IAC7B,MAAMC,KAAK,GAAGF,SAAS,CAACG,MAAM;IAC9B,MAAMC,KAAK,GAAGJ,SAAS,CAACK,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM,CAAEC,CAAC,IAAKA,CAAC,KAAK,EAAE,CAAC;IAC1D,MAAMC,aAAa,GAAG;MAAE,GAAGf;IAAU,CAAC;IACtCe,aAAa,CAACb,KAAK,GAAGS,KAAK,CAACD,MAAM;IAClCK,aAAa,CAACZ,UAAU,GAAGM,KAAK;IAEhCM,aAAa,CAACX,SAAS,GAAG,CAACG,SAAS,CAACS,KAAK,CAAC,qBAAqB,CAAC,IAAI,EAAE,EAAEN,MAAM;IAC/EK,aAAa,CAACV,UAAU,GAAG,CAACE,SAAS,CAACS,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,EAAEN,MAAM;IAC5EK,aAAa,CAACT,QAAQ,GAAGK,KAAK,CAACE,MAAM,CAAEC,CAAC,IAAKjB,QAAQ,CAACoB,QAAQ,CAACH,CAAC,CAACI,WAAW,EAAE,CAAC,CAAC,CAACR,MAAM;IACvFT,YAAY,CAACc,aAAa,CAAC;EAC7B,CAAC,EAAE,CAACf,SAAS,EAAED,IAAI,CAAC,CAAC;EAErB,oBACE;IAAK,SAAS,EAAC,YAAY;IAAA,UACxBoB,MAAM,CAACC,IAAI,CAACpB,SAAS,CAAC,CAACqB,GAAG,CAAEC,KAAa,iBACxC;MAAK,SAAS,EAAC,YAAY;MAAA,wBACzB;QAAM,SAAS,EAAC,WAAW;QAAA,UAAEA;MAAK;QAAA;QAAA;QAAA;MAAA,QAAQ,eAC1C;QAAM,SAAS,EAAC,WAAW;QAAA,UAAEtB,SAAS,CAACsB,KAAK;MAAC;QAAA;QAAA;QAAA;MAAA,QAAQ;IAAA,GAFtBA,KAAK;MAAA;MAAA;MAAA;IAAA,QAIvC;EAAC;IAAA;IAAA;IAAA;EAAA,QACE;AAEV,CAAC;AAAA,GAjCKxB,SAAS;AAAA,KAATA,SAAS;AAmCf,eAAeA,SAAS;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}